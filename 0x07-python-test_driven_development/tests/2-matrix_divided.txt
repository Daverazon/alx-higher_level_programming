>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

=====
USAGE
=====
matrix_divided(matrix:list, div:int/float) -> list

========================
Test number of arguments
========================
>>> matrix_divided([[2,3], [87, 0], [4.3, 3]], 4.5)
[[0.44, 0.67], [19.33, 0.0], [0.96, 0.67]]

>>> matrix_divided()
Traceback (innermost last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided(78)
Traceback (innermost last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

======================
Test type of arguments
======================
>>> matrix_divided([3.5, 9], 4)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([['75',3], [87, 0], [4.3, (34, 3)]], 5)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[32, 2, 4], [89, 2, 48]], "45")
Traceback (most recent call last):
TypeError: div must be a number

===============================
Test value/content of arguments
===============================
>>> matrix_divided([[]], 32)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[2, 3.245], [5], [23, 4, 6]], 6.4352)
Traceback (innermost last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[44, float('inf')]], 8)
[[5.5, inf]]

>>> matrix_divided([[5, float("NaN")]], 4.342)
[[1.15, nan]]

>>> matrix_divided([[4.42, 232]], float("inf"))
[[0.0, 0.0]]

>>> matrix_divided([[45, 2e3]], float('NaN'))
[[nan, nan]]

>>> matrix_divided([[34, 5], [3.34, 97]], 0)
Traceback (innermost last):
ZeroDivisionError: division by zero

=================
Test return value
=================
>>> mylist = [[3, 5], [8, 32.3]]
>>> mylistdiv = matrix_divided(mylist, 2)
>>> mylistdiv is mylist
False
